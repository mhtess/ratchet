// #### Rational Speech Act model
//
// ##### Utterances
//
// lifted-threshold model on the diffs?
//
// - `diffs > theta`  means "It's increasing more than you would expect."
// - `diffs < theta`  means "It's decreasing more than you would expect."
// - `approxEqual(diffs, 0)`  means "They're unrelated."
//
// Why not :
//
// - `diffs > 0`  means it's increasing
// - `diffs < 0`  means it's decreasing
//
// ?
// var opts = {method: "optimize", samples: 1000, steps: 1000,
//             optMethod: {adam: {stepSize: .01}}};
var opts = {method: "enumerate"};
// var opts = {method: "MCMC", kernel: "HMC", samples: 1000, burn: 500, verbose: true};
// var opts = {method: "MCMC", samples: 10000, burn: 5000, verbose: true};
// var opts = {method: "forward", samples: 1000}

var snap = function(x){
  return Math.round(x*bins)/bins;
}

var marginalize = function(dist, key){
  return Infer({model: function(){ return sample(dist)[key]}})
};

var generateData = function(){
  return repeat(20, function(){
    var x = uniform(0,1);
    var y = 1 - x;
    return {x, y}
  });
};

var KL = function(P,Q) {
  var diverge = function(xp,xq) {
    return xp == 0 ? 0 : (xp * Math.log(xp / xq) );
  };
  return sum(map2(diverge,P,Q));
};


var distProbs = function(dist, supp) {
  return map(function(s) {
    return Math.exp(dist.score(s))
  }, supp)
}

var alphas = {s1: 3, s2: 1};
var utterances = ["generic_increasing", "generic_decreasing", "silence"];

var minBin = stateVals[0];
var maxBin = stateVals[stateVals.length - 1];
var nBins = stateVals.length;
var binWidth = (Math.abs(maxBin) + Math.abs(minBin)) / (nBins - 1);

var lowerThresholdBins = map(function(x){
  return x - (binWidth / 2);
}, stateVals);

var upperThresholdBins = map(function(x){
  return x + (binWidth / 2);
}, stateVals);

var lowerThresholdPrior = Infer({
  model: function() { return uniformDraw(lowerThresholdBins) }
});
var upperThresholdPrior = Infer({
  model: function() { return uniformDraw(upperThresholdBins) }
});
var utterancePrior = Infer({
  model: function() { return uniformDraw(utterances) }
});

// soft truth functional semantics
var meaning = function(utterance, state, lowerThreshold, upperThreshold) {
   utterance === "generic_increasing" ? state > lowerThreshold  ? flip(0.99) : flip(0.01 ) :
   utterance === "generic_decreasing" ? state < upperThreshold ? flip(0.99) : flip(0.01 ) :
   utterance === "generic_decreasing_alot" ? state < -0.55 ? flip(0.99) : flip(0.01 ) :
  true
}

// hard truth functional semantics
// var meaning = function(utterance, state, lowerThreshold, upperThreshold) {
//    utterance === "generic_increasing" ? state > lowerThreshold  :
//    utterance === "generic_decreasing" ? state < upperThreshold :
//    utterance === "generic_decreasing_alot" ? state < -0.55 :
//   true
// }


var literalListener = cache(function(utterance, lowerThreshold, upperThreshold) {
  Infer({model: function(){
    var state = sample(statePrior.b1)
    var m = meaning(utterance, state, lowerThreshold, upperThreshold);
    condition(m)
    return state
  }})
})

var speaker1 = cache(function(state, lowerThreshold, upperThreshold) {
  Infer({model: function(){
    var utterance = sample(utterancePrior)
    var L0 = literalListener(utterance, lowerThreshold, upperThreshold)
    factor( alphas.s1 * L0.score(state) )
    return utterance
  }})
})

var listener1 = cache(function(utterance) {
  Infer({model: function(){
    var state = sample(statePrior.b1);
    var lowerThreshold = 0;//sample(lowerThresholdPrior);
    var upperThreshold = 0;//sample(upperThresholdPrior);
    var S1 = speaker1(state, lowerThreshold, upperThreshold)
    observe(S1, utterance)
    return state
  }})
})

var observer = cache(function(data, beliefs){
  return Infer(opts, function(){
    var betas = Vector([
      sample(beliefs.b0), sample(beliefs.b1)
    ]);
    mapData({data}, function(d){
        var predicted_y = T.get(betas, 0) + T.get(betas, 1)*d.x;
        observe(Gaussian({mu: predicted_y, sigma: sigma_y}), d.y);
    })
    return T.get(betas, 1);
  })
});


var gen0 = function(data){
  Infer({model: function(){
    var speakerBeliefs = observer(data, statePrior);
    var utterance = sample(utterancePrior);
    var L1 = listener1(utterance);

    var _kl = KL(
      distProbs(speakerBeliefs, speakerBeliefs.support()),
      distProbs(L1, speakerBeliefs.support())
    );

    factor(-1 * _kl)

    return {utterance: utterance, slope: sample(speakerBeliefs)}
  }})
}

var oneGeneration = function(uttDist, data){
  Infer({model: function(){

    // Belief updating
    var utt = sample(uttDist); // what I heard.
    var beliefsAfterLanguage = listener1(utt); // upadate beliefs via RSA L1
    var beliefsAfterData = observer(data,
      {b0: statePrior.b0, b1: beliefsAfterLanguage}
    );

    // Language production
    // var slope = sample(beliefsAfterData);
    var utterance = sample(utterancePrior); // what to say?
    var L1 = listener1(utterance);

    var _kl = KL(
      distProbs(beliefsAfterData, beliefsAfterData.support()),
      distProbs(L1, beliefsAfterData.support())
    );
    factor(-1 * _kl)
    return {utterance: utterance, slope: sample(beliefsAfterData)}
  }})
}

var nChains = 20;

var runChain = function(n, lang){

  var data = generateData();
  var thisGen = oneGeneration(lang, data);
  var nGen = (nChains - n);

  var uttDist = marginalize(thisGen, "utterance");

  display("gen-" +  nGen + " genDecreasing = " +
   Math.exp(uttDist.score("generic_decreasing")))

   display("gen-" +  nGen + " slope =  " +
   expectation(thisGen, function(x){return x.slope }))

  if (n == 0){
    return uttDist;
  } else {
    return runChain(n - 1, uttDist);
  }

}

var g0 = gen0(generateData());
runChain(nChains, marginalize(g0, "utterance"));
